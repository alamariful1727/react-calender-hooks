{"version":3,"sources":["Calendar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Calendar","today","Date","useState","currentDate","setCurrentDate","selectedDate","setSelectedDate","nextMonth","addMonths","prevMonth","subMonths","onDateClick","day","className","style","width","onClick","format","days","startDate","startOfWeek","i","push","key","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","formattedDate","cloneDay","isSameMonth","isSameDay","toDateString","cells","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAuHeA,G,MAzGE,WAChB,IAAMC,EAAQ,IAAIC,KADI,EAEgBC,mBAAS,IAAID,MAF7B,mBAEfE,EAFe,KAEFC,EAFE,OAGkBF,mBAAS,IAAID,MAH/B,mBAGfI,EAHe,KAGDC,EAHC,KA+EhBC,EAAY,WACjBH,EAAeI,YAAUL,EAAa,KAGjCM,EAAY,WACjBL,EAAeM,YAAUP,EAAa,KAGjCQ,EAAc,SAACC,GACpBN,EAAgBM,IAEjB,OACC,yBACCC,UAAU,SACVC,MAAO,CACNC,MAAO,UAtFR,yBAAKF,UAAU,8CACd,yBACCA,UAAU,8CACVG,QAASP,GAFV,gBAMA,yBAAKI,UAAU,4BACd,8BAAOI,YAAOd,EAVE,eAYjB,yBACCU,UAAU,8CACVG,QAAST,GAFV,kBAgFD,yBAAKM,UAAU,oBAtEJ,WAIZ,IAHA,IACMK,EAAO,GACTC,EAAYC,YAAYjB,GACnBkB,EAAI,EAAGA,EAAI,EAAGA,IACtBH,EAAKI,KACJ,yBACCT,UAAU,+DACVU,IAAKF,GAEJJ,YAAOO,YAAQL,EAAWE,GATX,WAanB,OAAOH,EAyDJA,GAtDU,WASb,IARA,IAAMO,EAAaC,YAAavB,GAC1BwB,EAAWC,YAAWH,GACtBN,EAAYC,YAAYK,GACxBI,EAAUC,YAAUH,GAEtBT,EAAO,GACPN,EAAMO,EACNY,EAAgB,GARD,aAUlBA,EAAgBd,YAAOL,EALL,KAMlB,IAAMoB,EAAWpB,EACjBM,EAAKI,KACJ,yBACCT,UAAS,+DACPoB,YAAYrB,EAAKa,GAEfS,YAAUtB,EAAKP,GACf,oCACA6B,YAAUtB,EAAKZ,GACf,mDACA,gBALA,qCAOJuB,IAAKX,EAAIuB,eACTnB,QAAS,kBAAML,EAAYqB,KAE3B,0BAAMnB,UAAU,+BAA+BkB,KAGjDnB,EAAMY,YAAQZ,EAAK,IApBbA,GAAOiB,GAAU,IAsBxB,OAAOX,EAwBJkB,O,MClGUC,MAbf,WACC,OACC,oCACC,yBAAKxB,UAAU,yDAAf,kBAGA,yBAAKA,UAAU,oCACd,kBAAC,EAAD,SCEgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1fcb3b48.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n\tformat,\r\n\tstartOfWeek,\r\n\taddDays,\r\n\tstartOfMonth,\r\n\tendOfMonth,\r\n\tendOfWeek,\r\n\tisSameMonth,\r\n\tisSameDay,\r\n\taddMonths,\r\n\tsubMonths\r\n} from \"date-fns\";\r\nimport \"./Calendar.css\";\r\nconst Calendar = () => {\r\n\tconst today = new Date();\r\n\tconst [currentDate, setCurrentDate] = useState(new Date());\r\n\tconst [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n\tconst header = () => {\r\n\t\tconst dateFormat = \"MMMM yyyy\";\r\n\t\treturn (\r\n\t\t\t<div className='flex justify-around items-center my-4 mx-4'>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='text-gray-800 font-bold icon cursor-pointer'\r\n\t\t\t\t\tonClick={prevMonth}\r\n\t\t\t\t>\r\n\t\t\t\t\tchevron_left\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='text-gray-800 font-bold '>\r\n\t\t\t\t\t<span>{format(currentDate, dateFormat)}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='text-gray-800 font-bold icon cursor-pointer'\r\n\t\t\t\t\tonClick={nextMonth}\r\n\t\t\t\t>\r\n\t\t\t\t\tchevron_right\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\tconst days = () => {\r\n\t\tconst dateFormat = \"iiiii\";\r\n\t\tconst days = [];\r\n\t\tlet startDate = startOfWeek(currentDate);\r\n\t\tfor (let i = 0; i < 7; i++) {\r\n\t\t\tdays.push(\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName='flex justify-center items-center h-8 text-teal-700 font-bold'\r\n\t\t\t\t\tkey={i}\r\n\t\t\t\t>\r\n\t\t\t\t\t{format(addDays(startDate, i), dateFormat)}\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn days;\r\n\t};\r\n\r\n\tconst cells = () => {\r\n\t\tconst monthStart = startOfMonth(currentDate);\r\n\t\tconst monthEnd = endOfMonth(monthStart);\r\n\t\tconst startDate = startOfWeek(monthStart);\r\n\t\tconst endDate = endOfWeek(monthEnd);\r\n\t\tconst dateFormat = \"d\";\r\n\t\tlet days = [];\r\n\t\tlet day = startDate;\r\n\t\tlet formattedDate = \"\";\r\n\t\twhile (day <= endDate) {\r\n\t\t\tformattedDate = format(day, dateFormat);\r\n\t\t\tconst cloneDay = day;\r\n\t\t\tdays.push(\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={`flex justify-center items-center h-12 cursor-pointer ${\r\n\t\t\t\t\t\t!isSameMonth(day, monthStart)\r\n\t\t\t\t\t\t\t? \"text-gray-500 pointer-events-none\"\r\n\t\t\t\t\t\t\t: isSameDay(day, selectedDate)\r\n\t\t\t\t\t\t\t? \"text-white bg-teal-700 rounded-md\"\r\n\t\t\t\t\t\t\t: isSameDay(day, today)\r\n\t\t\t\t\t\t\t? \"text-red-900 border-2 border-teal-700 rounded-md\"\r\n\t\t\t\t\t\t\t: \"text-gray-900\"\r\n\t\t\t\t\t}`}\r\n\t\t\t\t\tkey={day.toDateString()}\r\n\t\t\t\t\tonClick={() => onDateClick(cloneDay)}\r\n\t\t\t\t>\r\n\t\t\t\t\t<span className='p-1 leading-4 font-semibold'>{formattedDate}</span>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\tday = addDays(day, 1);\r\n\t\t}\r\n\t\treturn days;\r\n\t};\r\n\r\n\tconst nextMonth = () => {\r\n\t\tsetCurrentDate(addMonths(currentDate, 1));\r\n\t};\r\n\r\n\tconst prevMonth = () => {\r\n\t\tsetCurrentDate(subMonths(currentDate, 1));\r\n\t};\r\n\r\n\tconst onDateClick = (day: any) => {\r\n\t\tsetSelectedDate(day);\r\n\t};\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName='h-auto'\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: \"375px\"\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{header()}\r\n\t\t\t<div className='grid grid-cols-7'>\r\n\t\t\t\t{days()}\r\n\t\t\t\t{cells()}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default Calendar;\r\n","import React from \"react\";\nimport Calendar from \"./Calendar\";\nimport \"./styles/index.css\";\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<div className='my-3 text-lg font-extrabold text-teal-700 text-center'>\n\t\t\t\tReact Calender\n\t\t\t</div>\n\t\t\t<div className='flex justify-center items-center'>\n\t\t\t\t<Calendar />\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}